{
  "Index Template": {
    "prefix": "cidx",
    "body": [
      "import ${TM_DIRECTORY/^.+\\/(.*)$/$1/} from \"./${TM_DIRECTORY/^.+\\/(.*)$/$1/}.view\";",
      "",
      "export type { ${TM_DIRECTORY/^.+\\/(.*)$/$1/}Props } from \"./${TM_DIRECTORY/^.+\\/(.*)$/$1/}.view\";",
      "",
      "export default ${TM_DIRECTORY/^.+\\/(.*)$/$1/};",
      ""
    ]
  },
  "Test Template": {
    "prefix": "test",
    "body": [
      "describe(\"$1\", () => {",
      "  $2",
      "  it(\"$3\", () => {",
      "    $4",
      "  });",
      "})"
    ]
  },
  "Slice Template": {
    "prefix": "slicet",
    "body": [
      "import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";",
      "",
      "export type $1State = $2",
      "",
      "export const initial$1State: $1State = $3;",
      "",
      "const $1Slice = createSlice({",
      "  name: \"$1\",",
      "  initialState: initial$1State,",
      "  reducers: {",
      "    $4: (state, action: PayloadAction<$5>) => {",
      "      $6",
      "    }",
      "  },",
      "});",
      "",
      "export const $1Actions = $1Slice.actions",
      "",
      "export default $1Slice;",
      ""
    ]
  },
  "Reducer Function": {
    "prefix": "redf",
    "body": ["$1: (state, action: PayloadAction<$2>) => {", "  $3", "},"]
  },
  "Empty Reducer Function": {
    "prefix": "redfemp",
    "body": ["$1: (_, _action: PayloadAction<$2>) => {}"]
  },
  "Slice Test": {
    "prefix": "testslice",
    "body": [
      "import $1Slice, { initial$1State, $1Actions } from \"./$1Slice\";",
      "",
      "describe(\"$1Slice\", () => {",
      "",
      "  describe(\"reducer\", () => {",
      "    const reducer = $1Slice.reducer;",
      "",
      "    describe(\"$2\", () => {",
      "      const action = $1Actions.$2;",
      "",
      "      it(\"$3\", () => {",
      "        const initialState: $1State = initial$1State;",
      "        const payload = $4;",
      "",
      "        const resultState = reducer(initialState, action(payload));",
      "",
      "        expect(resultState).toEqual($5);",
      "      });",
      "    });",
      "  });",
      "});"
    ]
  },
  "Saga Template": {
    "prefix": "sagat",
    "body": [
      "import { fork, take, all } from \"typed-redux-saga\";",
      "import { $1Actions } from \"./$1Slice\";",
      "",
      "export function* $2Flow() {",
      "  while (true) {",
      "    const { type } = yield* take($1Actions.$2);",
      "  }",
      "}",
      "",
      "export function* watch$1Actions() {",
      "  yield* all([fork($2Flow)]);",
      "}"
    ]
  },
  "Saga Flow Template": {
    "prefix": "sagaflow",
    "body": [
      "export function* $2Flow() {",
      "  while (true) {",
      "    const { type } = yield* take($1Actions.$2);",
      "  }",
      "}"
    ]
  },
  "Saga Test": {
    "prefix": "testsaga",
    "body": [
      "import $1Slice from \"./$1Slice\";",
      "import { expectSaga } from \"redux-saga-test-plan\";",
      "import * as matchers from \"redux-saga-test-plan/matchers\";",
      "import {",
      "  $2Flow,",
      "  watch$1Actions,",
      "} from \"./$1Saga\";",
      "",
      "describe(\"$1Saga\", () => {",
      "  describe(\"$2Flow\", () => {",
      "    const actionCreator = $1Actions.$2;",
      "    const action = actionCreator();",
      "",
      "    it(\"$3\", () => {",
      "      return expectSaga($2Flow)",
      "        .take(actionCreator)",
      "        .dispatch(action)",
      "        .silentRun();",
      "    });",
      "  });",
      "",
      "  describe(\"watch$1Actions\", () => {",
      "    it(\"$4과 관련된 모든 액션들을 감시한다.\", () => {",
      "      return expectSaga(watch$1Actions)",
      "        .fork($2Flow)",
      "        .silentRun();",
      "    });",
      "  });",
      "});"
    ]
  },
  "Describe Saga": {
    "prefix": "descsaga",
    "body": [
      "describe(\"$2Flow\", () => {",
      "  const actionCreator = $1Actions.$2;",
      "",
      "  it(\"$3\", () => {",
      "    const action = actionCreator();",
      "",
      "    return expectSaga($2Flow)",
      "      .take(actionCreator)",
      "      .dispatch(action)",
      "      .silentRun();",
      "  });",
      "});"
    ]
  },
  "Use Effect": {
    "prefix": "usef",
    "body": ["useEffect$1(() => {", "  $2", "}, [$3]);"]
  },
  "Use State": {
    "prefix": "usst",
    "body": ["const [$1, $2] = useState$3($4);"]
  },
  "Use Callback": {
    "prefix": "uscb",
    "body": ["const $1 = useCallback$2(() => {", "  $3", "}, [$4]);"]
  },
  "Use Memo": {
    "prefix": "usmm",
    "body": ["const $1 = useMemo$2(() => {", "  $3", "}, [$4]);"]
  },
  "Use Ref": {
    "prefix": "usrf",
    "body": ["const $1 = useRef$2<$3 | null>(null);"]
  },
  "Hook Template": {
    "prefix": "hookt",
    "body": [
      "import { ${TM_FILENAME_BASE/use//} } from \"./${TM_FILENAME_BASE/use|Props//g}\"",
      "",
      "const ${TM_FILENAME_BASE}: () => ${TM_FILENAME_BASE/use//} = () => {",
      "  $2",
      "}",
      "",
      "export default ${TM_FILENAME_BASE}"
    ],
    "description": "Hook Template"
  },
  "View Hook Template": {
    "prefix": "viewhookt",
    "body": [
      "import { ${TM_FILENAME_BASE/use//} } from \"./${TM_FILENAME_BASE/use|Props//g}.view\"",
      "",
      "const ${TM_FILENAME_BASE}: () => ${TM_FILENAME_BASE/use//} = () => {",
      "  $2",
      "}",
      "",
      "export default ${TM_FILENAME_BASE}"
    ],
    "description": "View Hook Template"
  },
  "useQuery Template": {
    "prefix": "uq",
    "body": [
      "import { useQuery, UseQueryOptions } from \"react-query\";",
      "import api from \"../api\";",
      "import { QUERY_KEY } from \"~/types\";",
      "",
      "const ${TM_FILENAME_BASE} = (queryOptions?: UseQueryOptions<$1>) => {",
      "\tconst query = useQuery<$1>(QUERY_KEY.$2, $3, {$4...queryOptions});",
      "\treturn query;",
      "};",
      "",
      "export default ${TM_FILENAME_BASE};"
    ],
    "description": "queries template"
  },
  "useMutation template": {
    "prefix": "um",
    "body": [
      "import { useMutation, useQueryClient } from \"react-query\";",
      "import api from \"~/api\";",
      "",
      "const ${TM_FILENAME_BASE} = () => {",
      "  const queryClient = useQueryClient();",
      "",
      "  return useMutation(api.$1, {",
      "    onSuccess: () => {",
      "      $2",
      "    },",
      "  });",
      "};",
      "",
      "export default ${TM_FILENAME_BASE};",
      ""
    ],
    "description": "useMutation template"
  }
}
